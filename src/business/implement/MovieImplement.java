package business.implement;

import business.config.Alert;
import business.config.IOFile;
import business.config.InputMethods;
import business.config.Pagination;
import business.design.MovieDesign;
import business.entity.*;
import presentation.Login;

import java.io.File;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;


import static business.implement.FavoriteImplement.favoriteList;
import static business.implement.HistoryImplement.historyList;
import static business.implement.RateImplement.rateList;

public class MovieImplement implements MovieDesign<Movies> {
    public static List<Movies> moviesList;

    static {
        File moviesFile = new File(IOFile.MOVIES_PATH);
        if (moviesFile.length() == 0) {
            moviesList = new ArrayList<>();
            IOFile.updateFile(IOFile.MOVIES_PATH, moviesList);
        } else {
            moviesList = IOFile.getFile(IOFile.MOVIES_PATH);
        }
    }

    ////////////////////////////////////////ADMIN//////////////////////////////////
    // t√¨m movie b·∫±ng id
    @Override
    public Movies findById() {
        System.out.println("Nh·∫≠p ID phim c·∫ßn t√¨m:");
        int movieId = InputMethods.getInteger();
        return moviesList.stream().filter(movies -> movies.getMovieId() == movieId).findFirst().orElse(null);
    }

    // th√™m m·ªõi phim
    @Override
    public void createData() {
        System.out.println("Nh·∫≠p s·ªë l∆∞·ª£ng phim mu·ªën th√™m: ");
        int count = InputMethods.getInteger();
        for (int i = 0; i < count; i++) {
            Movies newMovie = new Movies();
            System.out.println("Nh·∫≠p th√¥ng tin cho phim th·ª©: " + (i + 1));
            newMovie.inputData();
            moviesList.add(newMovie);
            IOFile.updateFile(IOFile.MOVIES_PATH, moviesList);
        }
    }

    // c·∫≠p nh·∫≠t phim
    @Override
    public void updateData() {
        Movies movies = findById();
        boolean isExit = false;
        while (!isExit) {
            System.out.println("Nh·∫≠p th√¥ng tin mu·ªën c·∫≠p nh·∫≠t");
            System.out.println("1. Thay ƒë·ªïi t√™n phim");
            System.out.println("2. Thay ƒë·ªïi m√¥ t·∫£");
            System.out.println("3. Thay ƒë·ªïi url video");
            System.out.println("4. Thay ƒë·ªïi url image");
            System.out.println("5. Tho√°t");
            System.out.println(Alert.PLEASE_CHOSE);
            byte choice = InputMethods.getByte();
            switch (choice) {
                case 1:
                    System.out.println("T√™n phim c≈©: " + movies.getMovieName());
                    movies.setMovieName("");
                    movies.inputMovieName();
                    break;
                case 2:
                    System.out.println("M√¥ t·∫£ c≈©:");
                    System.out.println(movies.getDescription());
                    movies.inputMovieDescription();
                    break;
                case 3:
                    System.out.println("Url video c≈©:");
                    System.out.println(movies.getVideoUrl());
                    movies.inputMovieVideoUrl();
                    break;
                case 4:
                    System.out.println("Url image c≈©:");
                    System.out.println(movies.getImageUrl());
                    movies.inputMovieImageUrl();
                    break;
                case 5:
                    isExit = true;
                    break;
                default:
                    System.out.println(Alert.PLEASE_RE_ENTER);
                    break;
            }
        }
        System.out.println("S·ª≠a th√†nh c√¥ng (ÔΩûÔø£‚ñΩÔø£)ÔΩû");
        movies.setUpdateDate(LocalDateTime.now());
        IOFile.updateFile(IOFile.MOVIES_PATH, moviesList);
    }

    // x√≥a phim
    @Override
    public void deleteData() {
        Movies movies = findById();
        if (movies != null) {
            moviesList.remove(movies);
            movies.setUpdateDate(LocalDateTime.now());
            IOFile.updateFile(IOFile.MOVIES_PATH, moviesList);
            System.out.println("X√≥a th√†nh c√¥ng üëå");
        } else {
            System.out.println(Alert.MOVIE_NOTFOUND);
        }
    }

    // l·∫•y 10 phim nhi·ªÅu l∆∞·ª£t xem nh·∫•t
    public void getTop10View() {
        System.out.println("Nh·∫≠p th√°ng mu·ªën nh·∫≠n th·ªëng k√™");
        byte month = InputMethods.getByte();
        if (month >= 1 && month <= 12) {
            // l·∫•y ra list movie ƒë√£ s·∫Øp x·∫øp l·∫°i theo l∆∞·ª£ng view gi·∫£m d·∫ßn
            List<Movies> movies = moviesList.stream().filter(movies1 -> movies1.getCreatedDate().getMonthValue() == month).sorted((o1, o2) -> o2.getView() - o1.getView()).toList();
            if (movies.size() <= 10 && !movies.isEmpty()) {// trong tr∆∞·ªùng h·ª£p list c√≥ √≠t h∆°n 10 ptu
                Pagination.paginate(movies, Alert.MOVIE_NOTFOUND);
//                movies.forEach(Movies::displayData);
            } else if (movies.size() > 10) {// tr∆∞·ªùng h·ª£p l·ªõn h∆°n 10 ptu
                for (int i = 0; i < 10; i++) {
                    movies.get(i).displayData();
                }
            } else {
                System.out.println(Alert.NONE_MOVIE_ON_THE_LIST);
            }
        }
    }

    ////////////////////////////////////////USER///////////////////////////////////
    // t√¨m ki·∫øm phim theo t√™n
    @Override
    public void searchByName() {
        System.out.println("Nh·∫≠p t√™n phim c·∫ßn t√¨m:");
        String movieName = InputMethods.getString();
        Movies movies = moviesList.stream().filter(movies1 -> movies1.getMovieName().equals(movieName)).findFirst().orElse(null);// t√¨m ki·∫øm b·∫±ng strem
        if (movies != null) {// t√¨m th·∫•y th√¨ hi·ªÉn th·ªã th√¥ng tin
            System.out.println("K·∫øt qu·∫£:");
            System.out.println("T√™n phim: " + movies.getMovieName());
            System.out.println("Thu·ªôc danh m·ª•c: " + movies.getCategoryName());
            System.out.println("M√¥ t·∫£: " + movies.getDescription());
            System.out.println("1. Th√™m v√†o danh s√°ch y√™u th√≠ch");
            System.out.println("2. Tho√°t");
            System.out.println(Alert.PLEASE_CHOSE);
            if (!Login.user.isRole()) {// cho ph√©p ng∆∞·ªùi d√πng th√™m v√†o danh s√°ch y√™u th√≠ch
                byte choice = InputMethods.getByte();
                switch (choice) {
                    case 1:
                        addToFavoriteList(movies);
                        break;
                    case 2:
                        break;
                    default:
                        System.out.println(Alert.PLEASE_RE_ENTER);
                }
            }
        } else {
            System.out.println(Alert.MOVIE_NOTFOUND);
        }
    }
// hi·ªÉn th·ªã phim m·ªõi nh·∫•t
    @Override
    public void displayNewestMovie() {
        List<Movies> listNewestMovie = moviesList.stream().sorted((o1, o2) -> o2.getCreatedDate().compareTo(o1.getCreatedDate())).toList(); // s·∫Øp x·∫øp list theo ng√†y t·∫°o gi·∫£m d·∫ßn
        if (!listNewestMovie.isEmpty() && listNewestMovie.size() <= 3) {// n·∫øu l√≠st c√≥ √≠t h∆°n 3 ptu
            listNewestMovie.forEach(Movies::displayData);
        } else if (listNewestMovie.size() > 3) { // n·∫øu list nhi·ªÅu h∆°n 3 ptu
            for (int i = 0; i < 3; i++) {
                listNewestMovie.get(i).displayData();
            }
        } else {
            System.out.println(Alert.NONE_MOVIE_ON_THE_LIST);
        }
    }
// hi·ªÉn th·ªã danh s√°ch phim theo t√™n danh m·ª•c
    @Override
    public void displayMovieByCategory() {
        System.out.println("Nh·∫≠p t√™n danh m·ª•c phim c·∫ßn hi·ªÉn th·ªã:");
        String categoryName = InputMethods.getString();
        List<Movies> movies = moviesList.stream().filter(movies1 -> movies1.getCategoryName().equals(categoryName)).toList();
        if (movies.isEmpty()) {
            System.out.println("\u001B[31mDanh m·ª•c kh√¥ng c√≥ phim n√†o (¬¥„ÄÇÔºø„ÄÇÔΩÄ)\u001B[0m");
        } else {
            Pagination.paginate(movies, Alert.MOVIE_NOT_IN_LIST);
        }
    }
// s·∫Øp x·∫øp movie theo t√™n
    @Override
    public void sortMovieByName() {
        moviesList.sort((o1, o2) -> o1.getMovieName().compareTo(o2.getMovieName()));
        IOFile.updateFile(IOFile.MOVIES_PATH, moviesList);
        displayAll();
    }
//  hi·ªÉn th·ªã chi ti·∫øt m·ªô b·ªô phim
    @Override
    public void displayMovie() {
        System.out.println("Nh·∫≠p t√™n phim c·∫ßn t√¨m:");
        String movieName = InputMethods.getString();
        Movies movies = moviesList.stream().filter(movies1 -> movies1.getMovieName().equals(movieName)).findFirst().orElse(null);
        if (movies != null) {
            System.out.println("K·∫øt qu·∫£:");
            movies.displayData();
        } else {
            System.out.println(Alert.MOVIE_NOTFOUND);
        }
    }
//th√™m v√†o favorite list
    @Override
    public void addToFavoriteList(Movies movies) {
        Favorite myFavorite = favoriteList.stream().filter(favorite -> favorite.getUserId() == Login.user.getUserId()).findFirst().orElse(null); // l·∫•y ra favorite list c·ªßa ng d√πng
        if (myFavorite != null) {// n·∫øu ng∆∞·ªùi d√πng ƒë√£ c√≥ danh s√°ch y√™u th√≠ch
            List<Integer> listMovieId = myFavorite.getMovieId();// l·∫•y ra danh s√°ch y√™u th√≠ch
            listMovieId.add(movies.getMovieId());// th√™m phim v√†o sanh s√°ch
            myFavorite.setMovieId(listMovieId);// set l·∫°i danh s√°ch
        } else {// n·∫øu ng∆∞·ªùi d√πng ch∆∞a c√≥
            myFavorite = new Favorite();// t·∫°o m·ªõi ƒë·ªëi t∆∞·ª£ng
//            myFavorite.setMovieId(new ArrayList<>());// t·∫°o m·ªõi danh s√°ch y√™u th√≠ch
            myFavorite.setUserId(Login.user.getUserId());// set Id c·ªßa ng∆∞·ªùi d√πng l√† id ng∆∞·ªùi d√πng hi·ªán t·∫°i
            List<Integer> listMovieId = new ArrayList<>();// t·∫°o m·ªôt list id phim
            listMovieId.add(movies.getMovieId());// th√™m id c·ªßa movie hi·ªán t·∫°i v√†o list
            myFavorite.setMovieId(listMovieId);// set list id cho thu·ªôc t√≠nh id c·ªßa favorite v·ª´a t·∫°o
            favoriteList.add(myFavorite);// th√™m ƒë·ªëi t∆∞·ª£ng favorite v√†o list favorite
        }
        IOFile.updateFile(IOFile.FAVORITE_PATH, favoriteList);
    }
//xem phim
    @Override
    public void watchMovie() {
        boolean isExit = false;
        while (!isExit) {
            //t√¨m phim mu·ªën xem
            System.out.println("1. Hi·ªÉn th·ªã danh s√°ch phim");
            System.out.println("2. T√¨m ki·∫øm phim");
            System.out.println("3. Tho√°t");
            System.out.println(Alert.PLEASE_CHOSE);
            byte choice = InputMethods.getByte();
            switch (choice) {
                case 1:
                    moviesList.forEach(movies -> System.out.println((moviesList.indexOf(movies) + 1) + ". " + movies.getMovieName()));//in ra danh s√°ch phim hi·ªán c√≥
                    while (true) {
                        System.out.println("Ch·ªçn phim mu·ªën xem: ");
                        int choiceMovie = InputMethods.getInteger();
                        if (choiceMovie >= 1 && choiceMovie <= moviesList.size()) {
                            if (watchByList(choiceMovie)) {//xem phim
                                addToHistoryAndIncreaseView(choiceMovie);// th√™m v√†o l·ªãch s·ª≠ c·ªßa ng∆∞·ªùi d√πng v√† tƒÉng l∆∞·ª£t xem c·ªßa phim
                                System.out.println("1. ƒê·ªÉ l·∫°i ƒë√°nh gi√° c·ªßa b·∫°n\n" +
                                        "2. Tho√°t\n" +
                                        "Nh·∫≠p l·ª±a ch·ªçn");
                                byte commentOrNot = InputMethods.getByte();// ch·ªçn ƒë·ªÉ l·∫°i ƒë√°nh gi√° hay kh√¥ng
                                switch (commentOrNot) {
                                    case 1:
                                        leaveComment(moviesList.get(choiceMovie - 1));
                                        return;
                                    case 2:
                                        return;
                                    default:
                                        System.out.println(Alert.PLEASE_RE_ENTER);
                                        break;
                                }
                            }
                        } else {
                            System.out.println("\u001B[31mS·ªë th·ª© t·ª± nh·∫≠p v√†o kh√¥ng ch√≠nh x√°c, m·ªùi nh·∫≠p l·∫°i\u001B[0m");
                        }
                    }
                case 2:
                    System.out.println("Nh·∫≠p t√™n phim mu·ªën xem:");//t√¨m phim mu·ªën xem
                    String movieName = InputMethods.getString();
                    if (moviesList.stream().anyMatch(movies -> movies.getMovieName().equals(movieName))) {
                        int indexMovie = moviesList.indexOf(moviesList.stream().filter(movies -> movies.getMovieName().equals(movieName)).findFirst().orElse(null));
                        if (watchByList(indexMovie + 1)) {
                            addToHistoryAndIncreaseView(indexMovie + 1);
                            System.out.println("1. ƒê·ªÉ l·∫°i ƒë√°nh gi√° c·ªßa b·∫°n\n" +
                                    "2. Tho√°t");
                            System.out.println(Alert.PLEASE_CHOSE);
                            byte commentOrNot = InputMethods.getByte();
                            switch (commentOrNot) {
                                case 1:
                                    leaveComment(moviesList.get(indexMovie));
                                    return;
                                case 2:
                                    return;
                                default:
                                    System.out.println(Alert.PLEASE_RE_ENTER);
                                    break;
                            }
                            return;
                        }
                    } else {
                        System.out.println(Alert.MOVIE_NOTFOUND);
                    }
                    break;
                case 3:
                    isExit = true;
                    break;
                default:
                    break;
            }
        }
    }

    public void leaveComment(Movies movies) {
        System.out.println("Nh·∫≠p ƒë√°nh gi√° c·ªßa b·∫°n(1-5): ");
        byte rate = InputMethods.getByte();
        System.out.println("Nh·∫≠p b√¨nh lu·∫≠n");
        String comment = InputMethods.getString();
        Rate newRate = new Rate();// t·∫°o dtuong rate
        newRate.setUserId(Login.user.getUserId());//set c√°c th√¥ng tin cho ƒë·ªëi t∆∞·ª£ng
        newRate.setMovieId(movies.getMovieId());
        newRate.setRate(rate);
        newRate.setComment(comment);
        rateList.add(newRate);// th√™m v√†o list
        IOFile.updateFile(IOFile.RATE_PATH, rateList);
    }
// th√™m v√†o l·ªãch s·ª≠ v√† tƒÉng l∆∞·ª£t xem
    private static void addToHistoryAndIncreaseView(int choiceMovie) {
        moviesList.get(choiceMovie - 1).setView(moviesList.get(choiceMovie - 1).getView() + 1);// tƒÉng l∆∞·ª£t xem c·ªßa phim
        History myHistory = historyList.stream().filter(history -> history.getUserId() == Login.user.getUserId()).findFirst().orElse(null);
        if (myHistory != null) {// th√™m v√†o l·ªãch s·ª≠ n·∫øu ng∆∞·ªùi d√πng ƒë√£ t·ª´ng xem phim
            List<Movies> historyMovie = myHistory.getMovies();//thay ƒë·ªïi thu·ªôc t√≠nh nh·ªØng phim ƒë√£ xem c·ªßa ng∆∞·ªùi d√πng
            historyMovie.add(moviesList.get(choiceMovie - 1));
            myHistory.setMovies(historyMovie);
            myHistory.setUpdateDate(LocalDateTime.now());
        } else {// n·∫øu ng∆∞·ªùi d√πng ch∆∞a xem phim n√†o
            History newHistory = new History();//t·∫°o l·ªãch s·ª≠ v√† set c√°c thu·ªôc t√≠nh
            newHistory.setUserId(Login.user.getUserId());
            List<Movies> history = new ArrayList<>();
            history.add(moviesList.get(choiceMovie - 1));
            newHistory.setMovies(history);
            myHistory = newHistory;
            historyList.add(myHistory);
        }
        IOFile.updateFile(IOFile.HISTORY_PATH, historyList);
    }
//h√†m xem phim
    private static boolean watchByList(int choiceMovie) {
        System.out.println("ƒêang xem phim: " + moviesList.get(choiceMovie - 1).getMovieName());
        System.out.println("1.T·∫°m d·ª´ng");
        System.out.println("2.D·ª´ng xem");
        System.out.println(Alert.PLEASE_CHOSE);
        byte choiceWatch = InputMethods.getByte();
        switch (choiceWatch) {
            case 1:
                System.out.println("ƒêang t·∫°m d·ª´ng");
                System.out.println("1. Xem ti·∫øp");
                System.out.println("2. D·ª´ng xem");
                System.out.println(Alert.PLEASE_CHOSE);
                byte choiceContinue = InputMethods.getByte();
                switch (choiceContinue) {
                    case 1:
                        watchByList(choiceMovie);
                        break;
                    case 2:
                        return true;
                }
                break;
            case 2:
                return true;
            default:
                System.out.println(Alert.PLEASE_RE_ENTER);
                break;
        }
        return false;
    }

// hi·ªÉn th·ªã danh s√°ch phim
    @Override
    public void displayAll() {
        if (moviesList.isEmpty()) {
            System.out.println(Alert.NONE_MOVIE_ON_THE_LIST);
        } else {
            Pagination.paginate(moviesList, Alert.MOVIE_NOT_IN_LIST);
        }
    }

// hi·ªÉn th·ªã danh s√°ch phim nh∆∞ng ch·ªâ c√≥ t√™n phim
    @Override
    public void displayListMovie() {
        if (!moviesList.isEmpty()) {
            System.out.println("Danh s√°ch phim hi·ªán c√≥");
            for (int i = 0; i < moviesList.size(); i++) {
                System.out.println((i + 1) + ". " + moviesList.get(i).getMovieName());
            }
        } else {
            System.out.println(Alert.NONE_MOVIE_ON_THE_LIST);
        }
    }
// hi·ªÉn th·ªã nh·ªØng phim c√≥ l∆∞·ª£t xem cao nh·∫•t
    public void displayMostFamoustMovie() {
        List<Movies> listMostFamousMovie = moviesList.stream().sorted((o1, o2) -> o2.getView() - (o1.getView())).toList();
        if (!listMostFamousMovie.isEmpty() && listMostFamousMovie.size() <= 3) {
            listMostFamousMovie.forEach(Movies::displayData);
        } else if (listMostFamousMovie.size() > 3) {
            for (int i = 0; i < 3; i++) {
                listMostFamousMovie.get(i).displayData();
            }
        } else {
            System.out.println(Alert.NONE_MOVIE_ON_THE_LIST);
        }
    }
}
